Un programa es una secuencia de variables y definiciones de funciones.

La sintaxis de la definición de una variable es una lista, con al menos un elemento, 
de identificadores separados por comas seguido de ':' y un tipo. 
Las definiciones de variables terminan mediante el caracter ';'
a, b : int

Las funciones se definen mediante la palabra reservada "def" el identificador 
de la función, una lista de parametros separados por comas entre '(' y ')' seguido
 de ':' y el tipo de retorno o la palabra reservada "void". 
El tipo de retorno y de los parámetros debe ser de tipo simple (no se permiten 
ni arrays ni registros). El cuerpo de la funcion va entre '{' y '}'.
El cuerpo de las funciones son secuencias de definiciones de variables seguidos 
por una secuencia de sentencias. En ambos casos terminan con el caracter ';'

La funcion "main" debe estar la última, retornando void y sin parámetros.
Los tipos simples son "int", "double" y "char".

Los arrays se pueden crear con el constructor de tipos "[]", especificando el 
tamaño con un entero (como en C) seguido de cualquier tipo.
Array de arrays: a:[][]int;

Se usa el constructor de tipos "struct" para la creacion de registros. 
Los registros no tienen identificador, y los campos son declarados como variables 
dentro de '{' '}'. No se permite la definicion de tipos (p.e. typedef).
a:[][]struct {
	a, b: int;
	c: char;
	a2:[][] int;
	s: struct {
		a: int;
		b: doublr;
	};
};
Los tipos complejos ni se pueden definir en las funciones ni se puede pasar como parámetro!!!!!

Una escritura es la palabra reservada "print" seguida de una lista de expresiones
 separadas por comas. print a,4,b;
Una lectura es la palabra reservada "input" seguida de una lista de expresiones 
separadas por comas. input a,b,2,4;
Una asignación está compuesta por dos expresiones separadas por el operador '='.
a = b; 4 = 4;
La sentencia condicional "if"-"else" 
if a<4 : {
	a=4;
	print a;
}
else a = s;
Cuando el bloque del if else o while solo tiene una sentencia se pueden omitir las llaves
y la sentencia iterativa "while" siguen la 
sintaxis del lenguaje Python (sin parentesis y con ':' despues de la condicion).
while a : a = 5;
Se permite la sentencia 'return' <expresion> (la expresion es obligatoria).
La invocación a una función será una nueva expresión cuando retorne un valor 
(distinto de void). Un procedimiento (retorno void) será siempre sentencia.
Solo una sentencia después del return. return a;
La conversión explícita a tipos simples (cast) se realizará utilizando la sintaxis
 del lenguaje C. 
 f(); | a = f();
Las expresiones están formadas por:
- Constantes enteras, reales y caracter sin signo.
- Identificadores
- Los siguientes operadores aplicados a una o dos expresiones (por orden de precedencia descendente):
		( )			Non associative
		[]			Non associative
 		.			Left associative (Acceso a un campo)
        CAST     	Non associative (Cast explícito)-> b = (int)a; Tipos básicos
		(Cast implícito en operaciones) -> 4 + 4.5 
		- (unary)	Non associative
        !			Non associative
		* / %		Left associative
		+ -			Left associative
	> >= < <= != ==	Left associative
		&& ||		Left associative
		= 			Right associative

4 4,5 'a' a (4+5)*3
En el acceso a un array se puede poner una expresión siempre que devuelve un valor entero o cast
G = {VT, VNT, R, S} Una gramática está compuesta por vocabulario terminal(tokens) 
y no terminal(parte izquierda de las reglas de produccion a: B|C -> b: a | B), 
(VT U VNT)*