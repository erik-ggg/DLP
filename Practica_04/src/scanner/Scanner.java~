/* The following code was generated by JFlex 1.4.1 on 6/24/18 2:21 PM */

// ************  CÃ³digo a incluir ********************

package scanner;
import parser.Parser;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6/24/18 2:21 PM from the specification file
 * <tt>src/scanner/scanner.jflex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\10\2\0\1\2\22\0\1\2\1\44\1\14\1\13"+
    "\1\0\1\1\1\45\1\4\5\1\1\7\1\5\1\1\12\3\2\1"+
    "\1\43\1\42\1\41\1\1\1\0\4\12\1\6\25\12\1\1\1\11"+
    "\1\1\1\0\1\12\1\0\1\35\1\34\1\32\1\15\1\16\1\17"+
    "\1\12\1\25\1\26\1\12\1\40\1\27\1\37\1\23\1\33\1\31"+
    "\1\12\1\20\1\30\1\21\1\22\1\36\1\24\3\12\1\1\1\46"+
    "\1\1\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\1\4\1\5\1\3\1\6"+
    "\1\1\1\2\13\6\6\3\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\5\6\1\7\11\6\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\5\1\0"+
    "\1\20\1\0\1\21\4\6\1\22\11\6\1\0\1\6"+
    "\1\23\6\6\1\24\1\25\1\6\1\26\1\27\1\0"+
    "\2\6\1\30\1\31\2\6\1\32\1\33\1\1\1\34"+
    "\1\35\1\36\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\47\0\116\0\165\0\234\0\303\0\352"+
    "\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222"+
    "\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a"+
    "\0\u0381\0\u03a8\0\u03cf\0\303\0\u03f6\0\u041d\0\u0444\0\u046b"+
    "\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c\0\352"+
    "\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4"+
    "\0\u06db\0\47\0\47\0\47\0\47\0\47\0\47\0\47"+
    "\0\47\0\47\0\u0702\0\u0729\0\u03f6\0\u0750\0\352\0\u0777"+
    "\0\u079e\0\u07c5\0\u07ec\0\352\0\u0813\0\u083a\0\u0861\0\u0888"+
    "\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\352"+
    "\0\u09c0\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\352\0\352"+
    "\0\u0aaa\0\352\0\352\0\u0ad1\0\u0af8\0\u0b1f\0\352\0\352"+
    "\0\u0b46\0\u0b6d\0\352\0\352\0\47\0\352\0\352\0\352"+
    "\0\352";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\4\1\2\1\10\1\11\1\12\1\13\1\14\1\10"+
    "\1\15\3\10\1\16\1\10\1\17\1\10\1\20\1\21"+
    "\1\22\1\10\1\23\1\10\1\24\1\25\1\10\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\51\0\1\4\5\0"+
    "\1\4\41\0\1\5\2\34\1\10\3\0\1\10\2\0"+
    "\24\10\6\0\3\35\1\36\2\35\1\37\1\35\1\0"+
    "\1\40\4\35\1\37\30\35\3\0\1\34\2\0\1\41"+
    "\7\0\1\41\33\0\1\10\2\0\1\10\3\0\1\10"+
    "\2\0\24\10\6\0\10\11\1\0\36\11\14\0\1\42"+
    "\35\0\1\10\2\0\1\10\3\0\1\10\2\0\1\10"+
    "\1\43\14\10\1\44\5\10\11\0\1\10\2\0\1\10"+
    "\3\0\1\10\2\0\12\10\1\45\11\10\11\0\1\10"+
    "\2\0\1\10\3\0\1\10\2\0\1\10\1\46\22\10"+
    "\11\0\1\10\2\0\1\10\3\0\1\10\2\0\10\10"+
    "\1\47\13\10\11\0\1\10\2\0\1\10\3\0\1\10"+
    "\2\0\2\10\1\50\3\10\1\51\15\10\11\0\1\10"+
    "\2\0\1\10\3\0\1\10\2\0\4\10\1\52\2\10"+
    "\1\53\14\10\11\0\1\10\2\0\1\10\3\0\1\10"+
    "\2\0\3\10\1\54\20\10\11\0\1\10\2\0\1\10"+
    "\3\0\1\10\2\0\10\10\1\55\7\10\1\56\3\10"+
    "\11\0\1\10\2\0\1\10\3\0\1\10\2\0\3\10"+
    "\1\57\20\10\11\0\1\10\2\0\1\10\3\0\1\10"+
    "\2\0\16\10\1\60\5\10\11\0\1\10\2\0\1\10"+
    "\3\0\1\10\2\0\20\10\1\61\3\10\47\0\1\62"+
    "\1\63\46\0\1\64\46\0\1\65\1\66\45\0\1\67"+
    "\51\0\1\70\47\0\1\71\4\0\1\72\45\0\1\36"+
    "\1\72\1\0\1\41\7\0\1\41\33\0\1\73\1\72"+
    "\2\0\1\73\37\0\3\35\1\74\1\75\3\35\1\0"+
    "\36\35\3\0\1\73\3\0\1\73\53\0\1\76\35\0"+
    "\1\10\2\0\1\10\3\0\1\10\2\0\2\10\1\77"+
    "\21\10\11\0\1\10\2\0\1\10\3\0\1\10\2\0"+
    "\5\10\1\100\16\10\11\0\1\10\2\0\1\10\3\0"+
    "\1\10\2\0\13\10\1\101\10\10\11\0\1\10\2\0"+
    "\1\10\3\0\1\10\2\0\4\10\1\102\17\10\11\0"+
    "\1\10\2\0\1\10\3\0\1\10\2\0\11\10\1\103"+
    "\12\10\11\0\1\10\2\0\1\10\3\0\1\10\2\0"+
    "\4\10\1\104\7\10\1\105\7\10\11\0\1\10\2\0"+
    "\1\10\3\0\1\10\2\0\3\10\1\106\20\10\11\0"+
    "\1\10\2\0\1\10\3\0\1\10\2\0\11\10\1\107"+
    "\12\10\11\0\1\10\2\0\1\10\3\0\1\10\2\0"+
    "\11\10\1\110\12\10\11\0\1\10\2\0\1\10\3\0"+
    "\1\10\2\0\20\10\1\111\3\10\11\0\1\10\2\0"+
    "\1\10\3\0\1\10\2\0\13\10\1\112\10\10\11\0"+
    "\1\10\2\0\1\10\3\0\1\10\2\0\1\10\1\113"+
    "\22\10\11\0\1\10\2\0\1\10\3\0\1\10\2\0"+
    "\11\10\1\114\12\10\11\0\1\10\2\0\1\10\3\0"+
    "\1\10\2\0\11\10\1\115\12\10\11\0\1\73\46\0"+
    "\1\74\1\72\44\0\5\76\1\0\1\76\1\0\1\76"+
    "\1\0\1\116\24\76\11\0\1\10\2\0\1\10\3\0"+
    "\1\10\2\0\17\10\1\117\4\10\11\0\1\10\2\0"+
    "\1\10\3\0\1\10\2\0\1\10\1\120\22\10\11\0"+
    "\1\10\2\0\1\10\3\0\1\10\2\0\5\10\1\121"+
    "\16\10\11\0\1\10\2\0\1\10\3\0\1\10\2\0"+
    "\12\10\1\122\11\10\11\0\1\10\2\0\1\10\3\0"+
    "\1\10\2\0\5\10\1\123\16\10\11\0\1\10\2\0"+
    "\1\10\3\0\1\10\2\0\5\10\1\124\16\10\11\0"+
    "\1\10\2\0\1\10\3\0\1\10\2\0\4\10\1\125"+
    "\17\10\11\0\1\10\2\0\1\10\3\0\1\10\2\0"+
    "\6\10\1\126\15\10\11\0\1\10\2\0\1\10\3\0"+
    "\1\10\2\0\3\10\1\127\20\10\11\0\1\10\2\0"+
    "\1\10\3\0\1\10\2\0\1\10\1\130\22\10\11\0"+
    "\1\10\2\0\1\10\3\0\1\10\2\0\20\10\1\131"+
    "\3\10\11\0\1\10\2\0\1\10\3\0\1\10\2\0"+
    "\1\132\23\10\11\0\1\10\2\0\1\10\3\0\1\10"+
    "\2\0\6\10\1\133\15\10\22\0\1\134\35\0\1\10"+
    "\2\0\1\10\3\0\1\10\2\0\12\10\1\135\11\10"+
    "\11\0\1\10\2\0\1\10\3\0\1\10\2\0\3\10"+
    "\1\136\20\10\11\0\1\10\2\0\1\10\3\0\1\10"+
    "\2\0\1\10\1\137\22\10\11\0\1\10\2\0\1\10"+
    "\3\0\1\10\2\0\4\10\1\140\17\10\11\0\1\10"+
    "\2\0\1\10\3\0\1\10\2\0\15\10\1\141\6\10"+
    "\11\0\1\10\2\0\1\10\3\0\1\10\2\0\15\10"+
    "\1\142\6\10\11\0\1\10\2\0\1\10\3\0\1\10"+
    "\2\0\4\10\1\143\17\10\11\0\1\10\2\0\1\10"+
    "\3\0\1\10\2\0\23\10\1\144\22\0\1\145\35\0"+
    "\1\10\2\0\1\10\3\0\1\10\2\0\1\10\1\146"+
    "\22\10\11\0\1\10\2\0\1\10\3\0\1\10\2\0"+
    "\6\10\1\147\15\10\11\0\1\10\2\0\1\10\3\0"+
    "\1\10\2\0\4\10\1\150\17\10\11\0\1\10\2\0"+
    "\1\10\3\0\1\10\2\0\10\10\1\151\13\10\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2964];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\11\31\1\1\0\2\1\1\0\1\1\1\0"+
    "\17\1\11\11\1\1\1\0\1\1\1\0\17\1\1\0"+
    "\15\1\1\0\10\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
// ************  Atributos y mÃ©todos ********************

// * Para acceder al nÃºmero de lÃ­nea (yyline es package)
public int getLine() { 
	// * Flex empieza en cero
	return yyline+1;
}

// * Para acceder al nÃºmero de columna (yycolumn es package)
public int getColumn() { 
	// * Flex empieza en cero
	return yycolumn+1;
}

// * Valor semantico del token
private Object yylval;
public Object getYylval() {
	return this.yylval;
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { this.yylval = new String(yytext());
         			    return Parser.REAL_TYPE;
          }
        case 32: break;
        case 3: 
          { return yytext().charAt(0);
          }
        case 33: break;
        case 23: 
          { this.yylval = new String(yytext());
         			    return Parser.MAIN;
          }
        case 34: break;
        case 6: 
          { this.yylval = new String(yytext());
						return Parser.ID;
          }
        case 35: break;
        case 11: 
          { this.yylval = yytext();
         			    return Parser.LESS_THAN;
          }
        case 36: break;
        case 4: 
          { this.yylval = new Integer(yytext());
         			    return Parser.INT_CONSTANT;
          }
        case 37: break;
        case 9: 
          { this.yylval = yytext();
         			    return Parser.GREATER_THAN;
          }
        case 38: break;
        case 19: 
          { this.yylval = new String(yytext());
         			    return Parser.ELSE;
          }
        case 39: break;
        case 7: 
          { this.yylval = new String(yytext());
         			    return Parser.IF;
          }
        case 40: break;
        case 24: 
          { this.yylval = new String(yytext());
         			    return Parser.WHILE;
          }
        case 41: break;
        case 22: 
          { this.yylval = new String(yytext());
         			    return Parser.VOID;
          }
        case 42: break;
        case 25: 
          { this.yylval = new String(yytext());
         			    return Parser.INPUT;
          }
        case 43: break;
        case 2: 
          { System.err.println ("Lexical error at line " 
		+ this.getLine() + " and column "+getColumn()+":\n\tUnknow character \'"+ yycharat(0)+"\'.");
          }
        case 44: break;
        case 5: 
          { this.yylval = new Double(yytext());
						return Parser.REAL_CONSTANT;
          }
        case 45: break;
        case 20: 
          { this.yylval = new String(yytext());
         			    return Parser.CHAR_TYPE;
          }
        case 46: break;
        case 14: 
          { this.yylval = yytext();
         			    return Parser.AND;
          }
        case 47: break;
        case 15: 
          { this.yylval = yytext();
         			    return Parser.OR;
          }
        case 48: break;
        case 27: 
          { this.yylval = yytext();
         			    return Parser.BREAK;
          }
        case 49: break;
        case 30: 
          { this.yylval = new String(yytext());
         			    return Parser.STRUCT;
          }
        case 50: break;
        case 8: 
          { this.yylval = yytext();
         			    return Parser.RANGE_RIGHT;
          }
        case 51: break;
        case 10: 
          { this.yylval = yytext();
         			    return Parser.EQ;
          }
        case 52: break;
        case 21: 
          { this.yylval = yytext();
         			    return Parser.CASE;
          }
        case 53: break;
        case 12: 
          { this.yylval = yytext();
         			    return Parser.RANGE_LEFT;
          }
        case 54: break;
        case 17: 
          { this.yylval = new String(yytext());
         			    return Parser.def;
          }
        case 55: break;
        case 29: 
          { this.yylval = new String(yytext());
         			    return Parser.RETURN;
          }
        case 56: break;
        case 26: 
          { this.yylval = new String(yytext());
         			    return Parser.PRINT;
          }
        case 57: break;
        case 31: 
          { this.yylval = yytext();
         			    return Parser.SWITCH;
          }
        case 58: break;
        case 13: 
          { this.yylval = yytext();
         			    return Parser.NEQ;
          }
        case 59: break;
        case 18: 
          { this.yylval = new String(yytext());
         			    return Parser.INT;
          }
        case 60: break;
        case 16: 
          { this.yylval = new String(yytext());
         			    return Parser.CHAR_CONSTANT;
          }
        case 61: break;
        case 1: 
          { 
          }
        case 62: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
